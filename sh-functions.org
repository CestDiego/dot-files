#+TITLE:     Shell Profile
#+AUTHOR:    Howard Abrams
#+EMAIL:     howard.abrams@gmail.com

Common functions and aliases that I can share among all my computers.
This file is written to =$HOME/.bash.all.rc= and should be called
from =.bashrc= and/or =.zshrc=, via:

#+BEGIN_SRC sh :tangle no
  if [ -f "$HOME/.bash.all.sh" ]; then
    source "$HOME/.bash.all.sh"
  fi
#+END_SRC

According to [[http://shreevatsa.wordpress.com/2008/03/30/zshbash-startup-files-loading-order-bashrc-zshrc-etc/][this article]]:

  - For bash, put stuff in =~/.bashrc=, and make =~/.profile= source it.
â€ƒ - For zsh, put stuff in =~/.zshrc=, which is always executed.

Machine-specific gunk goes in the standard =.bashrc= and =~/.zshrc= files,
and global variables are stored in =.profile= and =.zsh_profile=.

* Technical Gunk

  If not running interactively, we don't need to do anything:

#+BEGIN_SRC sh
  [ -z "$PS1" ] && return
#+END_SRC

  The following are the tangled settings. Type: =C-c C-v t=
  to create the script file.

#+PROPERTY: tangle ~/.sh-funcs.sh
#+PROPERTY: comments org
#+PROPERTY: shebang #!/bin/sh
#+DESCRIPTION: Aliases and functions shareable between Bash and Zsh

* Editor

  Wrapper around the standard =emacsclient= executable. This
  essentially replaces the standard =emacs= command, but this
  is asynchronous and *doesn't block*:

#+BEGIN_SRC sh
  alias emacs='/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -n -q -a /Applications/Emacs.app/Contents/MacOS/Emacs'
#+END_SRC

  Another wrapper around =emacsclient= but this is a blocking
  approach suitable for being set to the =EDITOR= variable.

#+BEGIN_SRC sh
  alias e='/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -q -a /Applications/Emacs.app/Contents/MacOS/Emacs'
#+END_SRC

  It is unclear whether =e= is a good version for the =EDITOR=
  variable. According to the /info/ docs, we should do something like:

#+BEGIN_EXAMPLE
  EDITOR="emacsclient -a /Applications/Emacs.app/Contents/MacOS/Emacs +%d %s"
#+END_EXAMPLE

* Listing Files

  Using the GNU versions of =ls=, which can be installed by Homebrew
  or Ports, via: =port install coreutils=

#+BEGIN_SRC sh
  alias ls="gls --color"
  alias ll="gls --color -olhA"
#+END_SRC

* Finding Files

  The interface to =find=, while powerful, if quite obnoxious. Here
  is a few wrapper functions.

** f

   Wrapper around 'find' that excludes some useless directories, like
   =classes= and =.git= that ignores case, and does an /or/ around
   every file name.

   The first parameter can be a source directory to look for the
   file(s), or you can do something like 'src/../some-file.txt' to
   look in the 'src' directory for the files.

#+BEGIN_SRC sh
  function findit {
      START_PATH='.'
      FILES="$*"

      # If we have a phrase src/../nav.handlebars, then we want to look
      # in the 'src' directory for the filename given:
      if echo "$1" | grep '\.\.' >/dev/null
      then
          set $(echo "$1" | sed 's/\/*\.\.\/*/  /');
      fi

      # If the first option is a directory, then look in that path, otherwise,
      # start searching from the current directory.
      if [ -d "$1" -a -n "$2" ]
      then
          START_PATH=$1
          shift
          FILES="$*"
      fi
      
      # Ignore the classes and .git directories, as well as look for every
      # file name given.
      find $START_PATH \
          -not \( -path '*classes*' -or -path '*node_modules*' -or -path '.git*' \) \
          -and -iname $(perl -e 'print join " -o -iname ", @ARGV' $FILES)
  }

  alias f='noglob findit'
#+END_SRC

** sf

   Wrapper around 'find' that returns only a single file. Helpful for calls
   to an editor when you are pretty sure of the name of the file.

#+BEGIN_SRC sh
  function sf {
      noglob findit *$1* | head -1
  }
#+END_SRC

** ef

  Combines my 'f' and 'e' functions to easily edit a file in the local
  directory tree solely by the file name.

#+BEGIN_SRC sh
  function ef {
      e $(f $*)
  }
#+END_SRC

* Window Title

  Can we title the terminal window? Note, don't call this function
  =title= or bad things will happen.

#+BEGIN_SRC sh
  function xtitle {
      # Old Style? echo -n -e "\033]0;$*\007";;
      case "$1" in
          -t)     shift; echo "\e]1;$*\a";;
          -w)     shift; echo "\e]2;$*\a";;
          -b)     shift; echo "\e]0;$*\a";;
           *)     echo "\e]0;$*\a";;
      esac
  }
#+END_SRC

* Tab

  Opens a tab in the `Terminal` program and start something running in it.

#+BEGIN_SRC sh
  function xtab() {
    TITLE="$1"
    if [[ $1 = "-t" ]]
    then
        TITLE="$2"
        shift
        shift
    fi
    
    HISTFILE=$HOME/.zsh_histories/$(echo $TITLE | sed 's/ /_/g')
  
    osascript <<EOF
      tell application "System Events"
        tell process "Terminal" to keystroke "t" using command down
      end
      tell application "Terminal"
        activate
        set custom title of first window to "$TITLE"
        -- do script "echo '\e]1;$TITLE\a'" in window 1
        do script with command "xtitle $TITLE; HISTFILE=$HISTFILE; clear; $*" in window 1
      end tell
  EOF
  }
#+END_SRC

* Note Aliases

  My Note scripts allow me to create and search my text files.

#+BEGIN_SRC sh
alias work="note -g workday -t workday"
alias clojure="note -g clojure -t clojure"
alias conf="note -g conf -t clojure"
alias diary="note -g personal -t personal -l entry -r $HOME/bin/note-skel-diary.sh"
export LATEST="$HOME/Dropbox/org/latest"

alias notes-find="notes -a find"
alias notes-view="notes -a view"
alias notes-list="notes -a list"
alias notes-show="notes -a find -f"
alias notes-export="notes -a export"

if [ -f "$HOME/.notes/notes-tag-helper" ]
then
    source "$HOME/.notes/notes-tag-helper"
fi
#+END_SRC

* Beep

  I can put this at the end of a long running command and have it
  tell me when it is complete.

#+BEGIN_SRC sh
  function beep {
      if [ $? -eq 0 ]
      then
          echo $1
          MSG="The background process has completed."
          SAY="I am done."
          if [ -n "$1" ]; then
              MSG="$1 has completed."
              SAY="$1 is done."
          fi
          terminal-notifier -message "$MSG" -title "Process Complete"
          say "$SAY"
      else
          MSG="The background process has failed."
          SAY="I have failed."
          if [ -n "$1" ]; then
              MSG="$1 has failed."
              SAY="$1 has failed."
          fi
          terminal-notifier -message "$MSG" -title "Process Failed"
          say "$SAY"
          /bin/ls /no-file 2>/dev/null   # Make next process know previous failed
      fi
  }
#+END_SRC

* Clip

  If you want to gather data from the output, but starting with a
  particular line, and ending with another, use =clip=. For instance:

#+BEGIN_EXAMPLE
  nmap -A 192.168.0.1 | clip 'PORT ' 'Service detection performed'
#+END_EXAMPLE

  Will show just the "good" stuff from the =nmap= command.

  Function takes three arguments:

  1. The text (regular expression, actually) to use to begin printing
  2. The text to use to end printing (isn't actually
     printed... should it?)
  3. Optional text inserted at the beginning of each line.

#+BEGIN_SRC sh
  function clip {
    FIRST=$1
    ENDING=$2
    PADDING=${3:-""}
  
    perl -ne "\$s=1 if (/$FIRST/); \$s=0 if (/$ENDING/); print \"$PADDING\$_\" if (\$s==1);"
  }
#+END_SRC

* Git Helpers
** Tab Completion

   Complete expected git commands by pressing the tab key for Bash.
   I don't use this anymore since Zsh has a better module for this.

#+BEGIN_SRC sh :tangle no
if [ -e $GIT_HOME/contrib/completion/git-completion.bash -a "$0" = "-bash" ]
then
    . $GIT_HOME/contrib/completion/git-completion.bash
fi
#+END_SRC

** Whitespace Removers

   These alias remove trailing whitespace and lines containing
   nothing by spaces/tabs.

#+BEGIN_SRC sh
  alias pre-commit='git status --porcelain | egrep '\''^[MA]'\'' | cut -d '\'' '\'' -f 3 | xargs perl -pi -e '\''s/\t/    /g; s/[\t ]+$//'\'''
  alias pre-add='git status --porcelain | grep "^ M" | cut -d" " -f3 | xargs git add'
  alias white='xargs perl -pi -e '\''s/\t/    /g; s/[\t ]+$//'\'''
#+END_SRC

** Pull

   Allows me to pull new information from the remote branch, but not
   loose anything.

#+BEGIN_SRC sh
function pull {
    git stash
    git pull
    git stash pop
}
#+END_SRC

** Helper Aliases

   The following are shortcuts to some git commands that I use all
   the time. Most people prefix them with a 'g' character to keep
   them unique.

#+BEGIN_SRC sh
alias gst='git status'
alias gstatus='git status'
alias gadd='git add --update'  # Use full 'git add' if haven't already added it
alias gamend='git commit --amend --no-edit'
alias gstash='git stash'
alias gpop='git stash pop'
alias gshow='git stash show -p stash@{0}'
#+END_SRC

* Directory Bookmarks

  [[https://github.com/huyng/bashmarks][This script]] allows us to leave bookmarks to "popular" directories,
  to jump directly there with a single name.

  - s bookmarkname - saves the curr dir as bookmarkname
  - g bookmarkname - jumps to the that bookmark
  - g b[TAB] - tab completion is available
  - p bookmarkname - prints the bookmark
  - p b[TAB] - tab completion is available
  - d bookmarkname - deletes the bookmark
  - d [TAB] - tab completion is available
  - l - list all bookmarks

#+BEGIN_SRC sh
  # The following may already be aliases...
  for A in l g d
  do
    if [ alias = $(whence -w $A | cut -d: -f2) ]
    then
      unalias $A
    fi
  done

  if [ -e ~/.bash.d/bashmarks.sh ]
  then
      source ~/.bash.d/bashmarks.sh
  fi
#+END_SRC
* Language Support

  Certainly languages and frameworks could use a bit of help.

** Scala Helpers

   SBT requires more memory than it deserves.

#+BEGIN_SRC sh
  alias bigsbt='java -Xms512M -Xmx1536M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=384M -jar /opt/local/share/sbt/sbt-launch.jar'
#+END_SRC
