#+TITLE:  Emacs Org-Mode Settings
#+AUTHOR: Howard Abrams
#+EMAIL:  howard.abrams@gmail.com
#+DATE:   [2014-02-01 Sat][2014-02-01 Sat]
#+TAGS:   emacs

The [[http://orgmode.org][Org Mode]] feature was a big reason in my recent re-kindling of my
Emacs love affair. Make sure the latest packages are installed:

#+BEGIN_SRC elisp
  (packages-install '( org
                       org-mime
                       ox-reveal
                       org-journal
                       plantuml-mode
                     ))
#+END_SRC

* Initial Settings

  I really think that org-mode should be my default for most things,
  including regular text files:

#+BEGIN_SRC elisp
  (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
#+END_SRC

   Initialization of Org Mode by hooking it into YASnippets, which
   should allow me to easily add templates to my files.

#+BEGIN_SRC elisp
  (add-hook 'org-mode-hook
            '(lambda ()
               (yas/minor-mode-on)))
#+END_SRC

* Journaling

   Didn't realize that [[http://www.emacswiki.org/emacs/OrgJournal][org-journal]] essentially does what I have been
   doing by hand. With a little customization, I don't have to change
   anything else:

#+BEGIN_SRC elisp
  (if (autofeaturep 'org-journal)
      (progn
        (require 'org-journal)
        (setq org-journal-dir "~/journal/")))
#+END_SRC

   All my journal entries will be formatted using org-mode:

#+BEGIN_SRC elisp
  (add-to-list 'auto-mode-alist '(".*/[0-9]*$" . org-mode))
#+END_SRC

   The date format is essentially, the top of the file.

#+BEGIN_SRC elisp
  (setq org-journal-date-format "#+TITLE: Journal Entry- %Y-%m-%d (%A)")
#+END_SRC

   The time format is the heading for each section. I will set it to a
   blank since I really don't care about the time I add a section.

#+BEGIN_SRC elisp
  (setq org-journal-time-format "")
#+END_SRC

    A function to easily load today (and yesterday's) journal entry.

#+BEGIN_SRC elisp
  (defun journal-file-today ()
    "Creates and load a file based on today's date."
    (interactive)
    (let ((daily-name (format-time-string "%Y%m%d")))
      (find-file (expand-file-name
                  (concat "~/journal/" daily-name)))))
#+END_SRC

    Since I sometimes (not often) forget to create

#+BEGIN_SRC elisp
  (defun journal-file-yesterday ()
    "Creates and load a file based on yesterday's date."
    (interactive)
    (let ((daily-name (format-time-string "%Y%m%d"
       (time-subtract (current-time) (days-to-time 1)))))
      (find-file (expand-file-name
                  (concat "~/journal/" daily-name)))))
#+END_SRC

I really would really like to read what I did last year "at this
time", and by that, I mean, 365 days ago, plus or minus a few to get
to the same day of the week.

#+BEGIN_SRC elisp
  (defun journal-last-year-file ()
    "Returns the string corresponding to the journal entry that
  happened 'last year' at this same time (meaning on the same day
  of the week)."
  (let* ((last-year-seconds (- (float-time) (* 365 24 60 60)))
         (last-year (seconds-to-time last-year-seconds))
         (last-year-dow (nth 6 (decode-time last-year)))
         (this-year-dow (nth 6 (decode-time)))
         (difference (if (> this-year-dow last-year-dow)
                         (- this-year-dow last-year-dow)
                       (- last-year-dow this-year-dow)))
         (target-date-seconds (+ last-year-seconds (* difference 24 60 60)))
         (target-date (seconds-to-time target-date-seconds)))
    (format-time-string "%Y%m%d" target-date)))

  (defun journal-last-year ()
    "Loads last year's journal entry, which is not necessary the
  same day of the month, but will be the same day of the week."
    (interactive)
    (let ((journal-file (concat org-journal-dir (journal-last-year-file))))
      (find-file journal-file)))
  #+END_SRC


** Taking Meeting Notes

    I've notice that while I really like taking notes in a meeting, I
    don't always like the multiple windows I have opened, so I created
    this function that I can easily call to eliminate distractions
    during a meeting.

#+BEGIN_SRC elisp
(defun meeting-notes ()
  "Call this after creating an org-mode heading for where the notes for the meeting
should be. After calling this function, call 'meeting-done' to reset the environment."
  (interactive)
  (outline-mark-subtree)                              ;; Select org-mode section
  (narrow-to-region (region-beginning) (region-end))  ;; Only show that region
  (deactivate-mark)
  (delete-other-windows)                              ;; Get rid of other windows
  (text-scale-set 2)                                  ;; Text is now readable by others
  (global-set-key (kbd "<f6>") 'meeting-done)
  (message "When finished taking your notes, press <F6>"))
#+END_SRC

    Of course, I need an 'undo' feature when the meeting is over...

#+BEGIN_SRC elisp
(defun meeting-done ()
  "Attempt to 'undo' the effects of taking meeting notes."
  (interactive)
  (widen)                                       ;; Opposite of narrow-to-region
  (text-scale-set 0)                            ;; Reset the font size increase
  (winner-undo))                                ;; Put the windows back in place
#+END_SRC

** Org-Mode Colors

  Before we load =org-mode= proper, we need to set the following
  syntax high-lighting parameters. These are used to help bring out
  the source code during literate programming mode.

  This information came from [[http://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html][these instructions]], however, they tend
  to conflict with the /color-theme/, so we'll turn them off for now.

#+BEGIN_SRC elisp
  (defface org-block-begin-line
    '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
    "Face used for the line delimiting the begin of source blocks.")

  (defface org-block-background
    '((t (:background "#FFFFEA")))
    "Face used for the source block background.")

  (defface org-block-end-line
    '((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
    "Face used for the line delimiting the end of source blocks.")
#+END_SRC

* Library Loading

   The standard package manager (and most recent versions of Emacs)
   include =org-mode=, however, I want the latest version that has
   specific features for literate programming.

   Org-mode is installed in the global directory.

#+BEGIN_SRC elisp
  (require 'org)
  (require 'ob-tangle)
#+END_SRC

* Global Key Bindings

   The =org-mode= has some useful keybindings that are helpful no
   matter what mode you are using currently.

#+BEGIN_SRC elisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c b") 'org-iswitchb)

  (global-set-key (kbd "C-M-|") 'indent-rigidly)
#+END_SRC

* Local Key Bindings

  The following keybind ideas came from [[http://eschulte.github.io/emacs24-starter-kit/starter-kit-org.html][Emacs24 Starter Kit]].

#+BEGIN_SRC elisp
(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key "\M-\C-n" 'outline-next-visible-heading)
            (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
            (local-set-key "\M-\C-u" 'outline-up-heading)
            ;; table
            (local-set-key "\M-\C-w" 'org-table-copy-region)
            (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
            (local-set-key "\M-\C-l" 'org-table-sort-lines)
            ;; display images
            (local-set-key "\M-I" 'org-toggle-iimage-in-org)))
#+END_SRC

   A couple of short-cut keys to make it easier to edit text.

#+BEGIN_SRC elisp
  (defun org-text-bold () "Wraps the region with asterisks."
    (interactive)
    (surround-text "*"))
  (defun org-text-italics () "Wraps the region with slashes."
    (interactive)
    (surround-text "/"))
  (defun org-text-code () "Wraps the region with equal signs."
    (interactive)
    (surround-text "="))
#+END_SRC

   Now we can associate some keystrokes to the org-mode:

#+BEGIN_SRC elisp
  (add-hook 'org-mode-hook
        (lambda ()
          (local-set-key (kbd "A-b") 'org-text-bold)
          (local-set-key (kbd "A-i") 'org-text-italics)
          (local-set-key (kbd "A-=") 'org-text-code)))
#+END_SRC

   When pasting certain kinds of links, the "text" may be obvious.

#+BEGIN_SRC elisp
  (defun org-generate-link-description (url description)
    (cond
     ((string-match "jira.workday" url)
      (replace-regexp-in-string "https://jira.+/browse/" "" url))
     ((string-match "crucible.workday" url)
      (replace-regexp-in-string "https://crucible.+/cru/" "" url))
     (t description)))

  (setq org-make-link-description-function 'org-generate-link-description)
#+END_SRC

   I'm often typing Jira entries that match a particular link pattern.

#+BEGIN_SRC elisp
  (defun jira-link (b e)
    "Wraps the region with an org-mode link."
    (interactive "r")
    (save-restriction
      (narrow-to-region b e)
      (let ((jiraid (buffer-substring (point-min) (point-max))))
        (goto-char (point-min))
        (insert "[[https://jira.workday.com/browse/" jiraid "][")
        (goto-char (point-max))
        (insert "]]"))))
#+END_SRC

* Speed Keys

   If point is at the beginning of a headline or code block in
   org-mode, single keys do fun things. See =org-speed-command-help=
   for details (or hit the ? key at a headline).

#+BEGIN_SRC elisp
  (setq org-use-speed-commands t)
#+END_SRC

* Specify the Org Directories

   I keep all my =org-mode= files in a few directories, and I would
   like them automatically searched when I generate agendas.

#+BEGIN_SRC elisp
(setq org-agenda-files '("~/Dropbox/org/personal"
                         "~/Google Drive/technical"
                         "~/Dropbox/org/project"))
#+END_SRC

* Auto Note Capturing

   Let's say you were in the middle of something, but would like to
   /take a quick note/, but without affecting the file you are
   working on. This is called a "capture", and is bound to the
   following key:

#+BEGIN_SRC elisp
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

   This will bring up a list of /note capturing templates/:

#+BEGIN_SRC elisp
  (setq org-capture-templates
        '(("n" "Thought or Note" entry (file "~/Technical/general-notes.org")
           "* %i%?\n    %a" :empty-lines 1)

          ("w" "General Sprint Note" entry (file+headline (current-sprint-file) "Work Issues")
           "*** %i%?" :empty-lines 1)
          ("m" "Meeting Notes" entry (file+headline (current-sprint-file) "Meeting Notes")
           "** %i%?\n\n   Met on %t: \n\n" :empty-lines 1)
          ("s" "Scrum Status" entry (file+headline (current-sprint-file) "Scrum Status")
           "** %t\n\n   - Howard:\n   - Jeff:\n   - Hotta:\n   - Sachin:\n\n" :empty-lines 1)
          ("r" "Retrospective Status" entry (file+headline (current-sprint-file) "Status/Accomplishments")
           "*** %i%?\n  Linked: %a" :empty-lines 1)
          ("g" "Retrospective Goodness" entry (file+headline (current-sprint-file) "Keep Doing (Good)")
           "*** %i%?" :empty-lines 1)
          ("b" "Retrospective Badness" entry (file+headline (current-sprint-file) "Stop Doing (Bad)")
           "*** %i%?" :empty-lines 1)
          ("i" "Retrospective Improvement" entry (file+headline (current-sprint-file) "Start Doing (Improvements)")
           "*** %i%?" :empty-lines 1)
          ("x" "Note for Next Sprint" entry (file+headline (current-sprint-file) "Notes for Next Sprint")
           "*** %i%?" :empty-lines 1)

          ("p" "Personal Journal" entry (file+datetree "~/Technical/personal.org")
           "* Projects\n\n  %i%?\n\n  %a" :empty-lines 1)))

  ;; General notes go into this file:
  (setq org-default-notes-file "~/Technical/personal.org")
#+END_SRC

   After you have selected the template, you type in your note and hit
   =C-c C-c= to store it in the file listed above.

   Just remember, at some point to hit =C-c C-w= to /refile/ that note
   in the appropriate place.

* Checking Things Off

   When I check off an item as done, sometimes I want to add some
   details about the completion (this is really only helpful when I'm
   consulting).

   With this setting, each time you turn an entry from a TODO state
   into the DONE state, a line 'CLOSED: [timestamp]' will be inserted
   just after the headline. If you turn the entry back into a TODO
   item through further state cycling, that line will be removed
   again.

#+BEGIN_SRC elisp
  ; (setq org-log-done 'time)
  (setq org-log-done 'note)
#+END_SRC

* Org Publishing

   The brilliance of =org-mode= is the ability to publish your notes
   as HTML files into a web server. See [[http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][these instructions]]. I've
   transitioned over to the new =ox= exporter, see [[http://orgmode.org/worg/org-8.0.html][these instructions]].

#+BEGIN_SRC elisp
  (require 'ox-html)

  (setq org-publish-project-alist  '(
    ("org-notes"
     :base-directory        "~/Technical/"
     :base-extension        "org"
     :publishing-directory  "~/Sites/"
     :recursive             t
     :publishing-function org-html-publish-to-html
     :headline-levels       4             ; Just the default for this project.
     :auto-preamble         t
     :auto-sitemap          t             ; Generate sitemap.org automagically...
     :makeindex             t
     :section-numbers       nil
     :table-of-contents     nil
     :style "<link rel=\"stylesheet\" href=\"../css/styles.css\" type=\"text/css\"/><link rel=\"stylesheet\" href=\"css/styles.css\" type=\"text/css\"/> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\" type=\"text/javascript\"></script> <link href=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/themes/smoothness/jquery-ui.css\" type=\"text/css\" rel=\"Stylesheet\" />    <script src=\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js\" type=\"text/javascript\"></script> <script =\"text/jacascript\" src=\"js/script.js\"></script>"
     )

    ("dot-files"
     :base-directory       "~/Work/dot-files/"
     :base-extension       "org"
     :publishing-directory "~/Work/dot-files/docs"
     :recursive            f
     :publishing-function org-html-publish-to-html
     :auto-preamble         t
     :auto-sitemap          t             ; Generate sitemap.org automagically...
     :makeindex             f
     :section-numbers       nil
     :table-of-contents     nil
     )

    ("org-static"
     :base-directory       "~/Dropbox/org/"
     :base-extension       "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
     :publishing-directory "~/Sites/"
     :recursive            t
     :publishing-function  org-publish-attachment
     )

    ("all" :components ("org-notes" "org-static" "dot-files"))))
#+END_SRC

   I really, really would like to affect the output of the
   exported/published HTML files to make them /prettier/.

#+BEGIN_SRC elisp
  (setq org-html-style "<link rel='stylesheet' href='http://www.howardism.org/styles/org-export-html-style.css' type='text/css'/>
  <script src='http://use.edgefonts.net/source-sans-pro.js'></script>
  <script src='http://use.edgefonts.net/source-code-pro.js'></script>")
#+END_SRC

** Default Export Settings

    To make the =org-mode= export defaults closer to my liking
    (without having to put specific #+PROPERTY commands), start by
    =describe-variable= the =org-export-plist-vars= variable.

    This returns the list of variables that can be customized:

#+BEGIN_SRC elisp
  (setq org-export-with-section-numbers nil)
  (setq org-export-with-toc nil)
  (setq org-export-skip-text-before-1st-heading nil)

  (setq org-export-html-postamble nil) ;; don't need any gunk at end

  (setq org-export-creator-info nil)
  (setq org-export-email-info nil)
  (setq org-export-author-info nil)
  (setq org-export-time-stamp-file nil)
  (setq org-export-html-with-timestamp nil)
#+END_SRC

** Publishing as Presentation

    Out of all [[http://orgmode.org/worg/org-tutorials/non-beamer-presentations.html][the ideas]] online, I prefer using [[http://meyerweb.com/eric/tools/s5/][S5]], and by loading
    [[https://github.com/eschulte/org-S5/blob/master/org-export-as-s5.el][this code]], we can issue =org-export-as-s5=:

#+BEGIN_SRC elisp
  (autoload 'org-export-as-s5 "org-export-as-s5"
            "Module extension for Presentations for Org-Mode." t nil)
#+END_SRC

    And let's tie this to a keystroke to make it easier to use:

#+BEGIN_SRC elisp
  (global-set-key (kbd "<f9> p") 'org-export-as-s5)
#+END_SRC

** Publish as Markdown

    Using the [[http://orgmode.org/worg/org-contrib/org-export-generic.php][org-export-generic]] feature, we can export to Markdown
    using =C-c C-e g M=:

#+BEGIN_SRC elisp :tangle no
  (require 'org-export-generic)

  (org-set-generic-type
   "Markdown"
   '(:file-suffix ".markdown"
     :key-binding ?M
     :title-format "%s\n"
     :title-suffix ?=
     :body-header-section-numbers t
     :body-header-section-number-format "%s) "
     :body-section-header-prefix ("\n## " "\n### " "\n#### " "\n##### " "\n###### ")
     :body-section-header-format  "%s"
     :body-section-header-suffix  "\n\n"
     :todo-keywords-export        t
     :body-line-format            "  %s\n"
     :body-tags-export            t
     :body-tags-prefix            " <tags>"
     :body-tags-suffix            "</tags>\n"
     ;;:body-section-prefix       "<secprefix>\n"
     ;;:body-section-suffix       "</secsuffix>\n"
     :body-line-export-preformated        t
     :body-line-fixed-prefix      "<pre>\n"
     :body-line-fixed-suffix      "\n</pre>\n"
     :body-line-fixed-format      "%s\n"
     :body-list-prefix            "\n"
     :body-list-suffix            "\n"
     :body-list-format            "  * %s\n"
     ;;:body-number-list-prefix   "<ol>\n"
     ;;:body-number-list-suffix   "</ol>\n"
     ;;:body-number-list-format   "<li>%s</li>\n"
     ;;:body-number-list-leave-number     t
     :body-list-checkbox-todo     "[_] "
     :body-list-checkbox-todo-end ""
     :body-list-checkbox-done     "[X] "
     :body-list-checkbox-done-end ""
     :body-line-format            "%s"
     :body-line-wrap               79
     :body-text-prefix            ""
     :body-text-suffix            ""
     ))
#+END_SRC

* Presentations

   Currently generating presentations from my org-mode files using
   [[https://github.com/hakimel/reveal.js/][reveal.js]] and [[https://github.com/yjwen/org-reveal][org-reveal]].

#+BEGIN_SRC elisp
  (when (autofeaturep 'ox-reveal)
    (require 'ox-reveal)

    (setq org-reveal-root (concat "file://" (getenv "HOME") "/Other/reveal.js"))

    (setq org-reveal-postamble "Howard Abrams"))
#+END_SRC

* MobileOrg

   I use [[http://mobileorg.ncogni.to/doc/getting-started/using-dropbox/][Dropbox with MobileOrg]] in order to read my notes on my iPad.

   The "global" location of my Org files on my local system:

#+BEGIN_SRC elisp
  (setq org-directory "~/Dropbox/org/personal")
#+END_SRC

   Set the name of the file where new notes will be stored

#+BEGIN_SRC elisp
  (setq org-mobile-inbox-for-pull "~/Dropbox/org/flagged.org")
#+END_SRC

   Set to <your Dropbox root directory>/MobileOrg.

#+BEGIN_SRC elisp
  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
#+END_SRC

   To get this going, we just need to: =M-x org-mobile-push=

* The Tower of Babel

   The trick to literate programming is in the [[http://orgmode.org/worg/org-contrib/babel/intro.html][Babel project]], which
   allows org-mode to not only interpret source code blocks, but
   evaluate them and tangle them out to a file.

#+BEGIN_SRC elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sh         . t)
   (js         . t)
   (emacs-lisp . t)
   (perl       . t)
   (scala      . t)
   (clojure    . t)
   (python     . t)
   (dot        . t)
   (css        . t)
   (plantuml   . t)))
#+END_SRC

   I want CoffeeScript to be supported in org-mode, but I need to do
   it myself at the moment.

#+BEGIN_SRC elisp
  (when (locate-library "ob-coffee")
      (require 'ob-coffee))
#+END_SRC

   It seems to automatically recognize the language used in a source
   block, but if not, call =org-babel-lob-ingest= to add all the
   languages from the code block into the list that Babel supports.
   Keystroke: =C-c C-v i=.

** Just Evaluate It

    I'm normally fine with having my code automatically evaluated.

#+BEGIN_SRC elisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

** Font Coloring in Code Blocks

#+BEGIN_SRC elisp
   ; (setq org-src-fontify-natively t)
   (setq org-src-tab-acts-natively t)

   (global-set-key (kbd "<f9> g") 'org-src-fontify-buffer)
   (global-set-key (kbd "<f9> f") 'org-src-fontify-block)
#+END_SRC

    Normally, fontifying the individual code blocks makes it
    impossible to work with, so instead of turning it on at the global
    level for all blocks, I created a couple of keystrokes to
    selectively colorize one block at a time.

* Technical Artifacts

  Need to provide the =init-org-mode= so that I can require this
  package.

#+BEGIN_SRC elisp
  (provide 'init-org-mode)
#+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization of Org-Mode
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/elisp/init-org-mode.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
