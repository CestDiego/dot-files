#+TITLE:  Emacs EShell Parameters
#+AUTHOR: Howard Abrams
#+EMAIL:  howard.abrams@gmail.com
#+DATE:   [2014-02-27 Thu]
#+TAGS:   emacs

My frustration with shells makes me enjoy Emacs Shell, but there are
some significant differences to address.

* Introduction

  Sure /most/ things /just work/ as I would expect, and typing =dired=
  (or my =d= alias), can be good for altering file names and things.
  However, after reading the manual, I realize I need to remember the
  advantages and differences.

** Looping over Files

   First, "shell work" goes between curly braces. For instance, the
   following shell command:

#+BEGIN_SRC sh :tangle no
for FILE in *.xpm
do
   f=`basename $FILE`
   convert $f.xpm $f.png
done
#+END_SRC

   Would become the following in EShell:

#+BEGIN_SRC sh :tangle no
for f in *.xpm(:r) { convert $f.xpm $f.png }
#+END_SRC

   Here we also see that the =(:r)= modifies the glob pattern to strip
   off the extension.

** Calling Lisp

   The following two commands seem to be the same:

#+BEGIN_EXAMPLE
$ (message "Hello")
$ message "Hello"
#+END_EXAMPLE

   In other words, you can just call Emacs functions through a
   lispy-approach, or with a more shell-ish. However, you can not do
   non-Emacs functions, like =echo=, in parens.

** Interacting with Emacs

   The following command will append the list of files at the end of this
   buffer (remember to not use a single =>= or the buffer will be overwritten.

#+BEGIN_EXAMPLE
ls >> #<buffer emacs-eshell.org>
#+END_EXAMPLE

   Remember that piping to =/etc/clip= will put the output into the clipboard.

* Eshell-Specific Packages

  While EShell is built into the Emacs (and has been for
  freakin'ever), I have a few packages I think would be nice to use.

#+BEGIN_SRC elisp
  (packages-install '( esh-buf-stack
                       ))
#+END_SRC

* Basics

** Set up the Correct Path

   Need the correct PATH even if we start Emacs from the GUI:

#+BEGIN_SRC elisp
  (setenv "PATH"
          (concat
           "/usr/local/bin:/usr/local/sbin:"
           (getenv "PATH")))
#+END_SRC

** Pager Setup

   If any program wants to pause the output through the =$PAGER=
   variable, well, we don't really need that:

#+BEGIN_SRC elisp
  (setenv "PAGER" "cat")
#+END_SRC

* Aliases

   Gotta have some [[http://www.emacswiki.org/emacs/EshellAlias][shell aliases]], right?

#+BEGIN_SRC elisp
  (defalias 'e 'find-file)
  (defalias 'ff 'find-file)
  (defalias 'emacs 'find-file)
#+END_SRC

   Replacing the window with the new buffer may not be what I want.

#+BEGIN_SRC elisp
  (defalias 'ee 'find-file-other-window)
#+END_SRC

   Pull up dired, but without parameters, just use the current directory.

#+BEGIN_SRC elisp
  (defun eshell/d (&rest args)
    (dired (pop args) "."))
#+END_SRC

   Some of my favorite bash aliases, can be even more helpful in
   Eshell.

   Running the following once should update the [[file:~/.emacs.d/eshell/alias][.emacs.d/eshell/alias]] file.

#+BEGIN_EXAMPLE
  alias ll /usr/local/bin/gls -AlohG --color=always
#+END_EXAMPLE

   To make things more consistent between different hosts, I will
   prefer the internal Emacs Eshell commands to the external versions.

#+BEGIN_SRC elisp
  (setq eshell-prefer-lisp-functions t)
#+END_SRC

** Git

   My =gst= command is just an alias to =magit-status=, but using the
   =alias= doesn't pull in the current working directory, so I make it
   a function, instead:

#+BEGIN_SRC elisp
  (defun eshell/gst (&rest args)
      (magit-status (pop args) nil)
      (eshell/echo))   ;; The echo command suppresses output
#+END_SRC

   What about =gd= to call the Diff command?

#+BEGIN_SRC elisp
(defalias 'gd 'magit-diff-unstaged)
(defalias 'gds 'magit-diff-staged)
#+END_SRC

** Find File

   We should have an "f" alias for searching the current directory for
   a file, and a "ef" for editing that file.

#+BEGIN_SRC elisp
  (defun eshell/f (filename &optional dir)
    "Searches in the current directory for files that match the
  given pattern. A simple wrapper around the standard 'find'
  function."
    (let ((cmd (concat
                "find " (or dir ".")
                "      -not -path '*/.git*'"
                " -and -not -path '*node_modules*'"
                " -and -not -path '*classes*'"
                " -and "
                " -type f -and "
                "-iname '" filename "'")))
      (message cmd)
      (shell-command-to-string cmd)))

  (defun eshell/ef (filename &optional dir)
    "Searches for the first matching filename and loads it into a
  file to edit."
    (let* ((files (eshell/f filename dir))
           (file (car (s-split "\n" files))))
      (find-file file)))
#+END_SRC

* Visual Executables

   Eshell would get somewhat confused if I ran the following commands
   directly through the normal Elisp library, as these need the better
   handling of ansiterm:

#+BEGIN_SRC elisp
  (add-hook 'eshell-mode-hook
     '(lambda nil
        (add-to-list 'eshell-visual-commands "ssh")
        (add-to-list 'eshell-visual-commands "tail")))
#+END_SRC

* Ignoring Directories

   Great shell with some good tweaks taken from [[https://github.com/eschulte/emacs24-starter-kit/blob/master/starter-kit-eshell.org][the Starter Kit]]
   project. Ignoring the =.git= directories seem like a good idea.

#+BEGIN_SRC elisp :tangle no
  (setq eshell-cmpl-cycle-completions nil
        eshell-save-history-on-exit t
        eshell-cmpl-dir-ignore "\\`\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'")
#+END_SRC

* Special Prompt

  Following [[http://blog.liangzan.net/blog/2012/12/12/customizing-your-emacs-eshell-prompt/][these instructions]], we build a better prompt with the Git
  branch in it (Of course, it matches my Bash prompt). First, we need
  a function that returns a string with the Git branch in it,
  e.g. ":master"

  #+BEGIN_SRC elisp
    (defun curr-dir-git-branch-string (pwd)
      "Returns current git branch as a string, or the empty string if
    PWD is not in a git repo (or the git command is not found)."
      (interactive)
      (when (and (eshell-search-path "git")
                 (locate-dominating-file pwd ".git"))
        (let ((git-output (shell-command-to-string (concat "cd " pwd " && git branch | grep '\\*' | sed -e 's/^\\* //'"))))
          (if (> (length git-output) 0)
              (concat " :" (substring git-output 0 -1))
            "(no branch)"))))
  #+END_SRC

  The function takes the current directory passed in via =pwd= and
  replaces the =$HOME= part with a tilde. I'm sure this function
  already exists in the eshell source, but I didn't find it...

  #+BEGIN_SRC elisp
    (defun pwd-replace-home (pwd)
      "Replace home in PWD with tilde (~) character."
      (interactive)
      (let* ((home (expand-file-name (getenv "HOME")))
             (home-len (length home)))
        (if (and
             (>= (length pwd) home-len)
             (equal home (substring pwd 0 home-len)))
            (concat "~" (substring pwd home-len))
          pwd)))
  #+END_SRC

  Make the directory name be shorter...by replacing all directory
  names with just its first names. However, we leave the last two to
  be the full names. Why yes, I did steal this.

  #+BEGIN_SRC
    (defun pwd-shorten-dirs (pwd)
      "Shorten all directory names in PWD except the last two."
      (let ((p-lst (split-string pwd "/")))
        (if (> (length p-lst) 2)
            (concat
             (mapconcat (lambda (elm) (if (zerop (length elm)) ""
                                   (substring elm 0 1)))
                        (butlast p-lst 2)
                        "/")
             "/"
             (mapconcat (lambda (elm) elm)
                        (last p-lst 2)
                        "/"))
          (mapconcat (lambda (elm) elm)
                     p-lst
                     "/"))))
  #+END_SRC

  Now tie it all together with a prompt function can color each of the
  prompts components.

  #+BEGIN_SRC elisp
    (setq eshell-prompt-function
          (lambda ()
            (let* ((directory (pwd-shorten-dirs (pwd-replace-home (eshell/pwd))))
                   (parent (file-name-directory directory))
                   (name (file-name-base directory))
                   (branch (or (curr-dir-git-branch-string (eshell/pwd)) "")))

              (if (eq 'dark (frame-parameter nil 'background-mode))
                  (concat   ;; Prompt for Dark Themes
                   (propertize parent 'face `(:foreground "#8888FF"))
                   (propertize name   'face `(:foreground "#8888FF" :weight bold))
                   (propertize branch 'face `(:foreground "green"))
                   (propertize " $"   'face `(:weight ultra-bold))
                   (propertize " "    'face `(:weight bold)))

                (concat    ;; Prompt for Light Themes
                 (propertize parent 'face `(:foreground "blue"))
                 (propertize name   'face `(:foreground "blue" :weight bold))
                 (propertize branch 'face `(:foreground "dark green"))
                 (propertize " $"   'face `(:weight ultra-bold))
                 (propertize " "    'face `(:weight bold)))))))
  #+END_SRC

* Stack the Buffer

    One of the few things I miss about ZShell is the ability to easily
    save off a half-finished command for later invocation. I now have
    =M-q= functionality:

#+BEGIN_SRC elisp
  (when (autofeaturep 'esh-buf-stack)
    (require 'esh-buf-stack)
    (setup-eshell-buf-stack)
    (add-hook 'eshell-mode-hook
              (lambda () (local-set-key (kbd "M-q") 'eshell-push-command))))
#+END_SRC

* Shell Here

  If I make an alias that closes a window easily, I can have a quick
  "x" alias that quickly exits and [[file:emacs.org::*Macintosh][closes the window]].

#+BEGIN_SRC elisp
  (defun eshell/x ()
    "Closes the EShell session and gets rid of the EShell window."
    (kill-buffer)
    (delete-window))
#+END_SRC

  Now making little Shells whenever I need them makes sense:

#+BEGIN_SRC elisp
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
  current buffer's file. The eshell is renamed to match that
  directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (height (/ (window-total-height) 3))
           (name   (car (last (split-string parent "/" t)))))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (rename-buffer (concat "*eshell: " name "*"))

      (insert (concat "ls"))
      (eshell-send-input)))

  (global-set-key (kbd "C-!") 'eshell-here)
#+END_SRC

* Better Command Line History

  On [[http://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell/][this discussion]] a little gem for using IDO to search back through
  the history, instead of =M-r=. Also, while =M-p= cycles through the
  history, =M-P= actually moves up the history in the buffer. Seems
  reasonable.

#+BEGIN_SRC elisp
  (add-hook 'eshell-mode-hook
            (lambda ()
              (local-set-key (kbd "M-P") 'eshell-previous-prompt)
              (local-set-key (kbd "M-N") 'eshell-next-prompt)
              (local-set-key (kbd "M-r")
                     (lambda ()
                       (interactive)
                       (insert
                        (ido-completing-read "Eshell history: "
                                 (delete-dups
                                  (ring-elements eshell-history-ring))))))
              (local-set-key (kbd "M-S-r") 'eshell-list-history)))
#+END_SRC

* Smarter Shell

  After reading Mickey's [[http://www.masteringemacs.org/articles/2010/12/13/complete-guide-mastering-eshell/][Mastering EShell]] article, I like the /smart/
  approach where the cursor stays on the command (where it can be
  re-edited). Sure, it takes a little while to get used to...

#+BEGIN_SRC elisp
  (require 'em-smart)
  (setq eshell-where-to-jump 'begin)
  (setq eshell-review-quick-commands nil)
  (setq eshell-smart-space-goes-to-end t)
#+END_SRC

* Helpers

  Sometimes you just need to change something about the current file
  you are editing...like the permissions or even execute it. Hitting
  =Command-1= will prompt for a shell command string and then append
  the current file to it and execute it.

#+BEGIN_SRC elisp
  (defun execute-command-on-file-buffer (cmd)
    (interactive "sCommand to execute: ")
    (let* ((file-name (buffer-file-name))
           (full-cmd (concat cmd " " file-name)))
      (shell-command full-cmd)))

  (defun execute-command-on-file-directory (cmd)
    (interactive "sCommand to execute: ")
    (let* ((dir-name (file-name-directory (buffer-file-name)))
           (full-cmd (concat "cd " dir-name "; " cmd)))
      (shell-command full-cmd)))

  (global-set-key (kbd "A-1") 'execute-command-on-file-buffer)
  (global-set-key (kbd "A-!") 'execute-command-on-file-directory)
#+END_SRC
* Technical Artifacts

  Make sure that we can simply =require= this library.

#+BEGIN_SRC elisp
  (provide 'init-eshell)
#+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization of Eshell
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/elisp/init-eshell.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
